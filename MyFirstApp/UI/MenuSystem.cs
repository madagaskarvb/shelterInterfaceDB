using System;
using System.Collections.Generic;
using System.Threading;

namespace AnimalShelterCLI.UI
{
    // –ü—É–Ω–∫—Ç –º–µ–Ω—é: –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ —Ñ–∞–±—Ä–∏–∫–∞ –ø–æ–¥–º–µ–Ω—é
    public class MenuItem
    {
        public string Title { get; set; } = "";
        public Action? Action { get; set; }
        public Func<Menu>? SubMenuFactory { get; set; }

        public bool IsSubMenu => SubMenuFactory != null;
    }

    // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é
    public class Menu
    {
        private readonly List<MenuItem> _items = new();
        public string Title { get; }

        public Menu(string title)
        {
            Title = title ?? "";
        }

        public void AddItem(string title, Action action)
        {
            _items.Add(new MenuItem { Title = title, Action = action });
        }

        public void AddSubMenu(string title, Func<Menu> subMenuFactory)
        {
            _items.Add(new MenuItem { Title = title, SubMenuFactory = subMenuFactory });
        }

        public void Display()
        {
            while (true)
            {
                MenuHelper.PrintHeader(Title);

                // –†–µ–Ω–¥–µ—Ä –ø—É–Ω–∫—Ç–æ–≤
                for (int i = 0; i < _items.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {_items[i].Title}");
                }
                Console.WriteLine("0. –í—ã—Ö–æ–¥");

                Console.Write("\n–í–∞—à –≤—ã–±–æ—Ä: ");
                var key = Console.ReadLine();

                if (string.IsNullOrWhiteSpace(key))
                {
                    MenuHelper.PrintError("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞.");
                    continue;
                }

                if (!int.TryParse(key, out var num))
                {
                    MenuHelper.PrintError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ.");
                    continue;
                }

                if (num == 0)
                {
                    // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∞–Ω–∏–º–∞—Ü–∏—é
                    AsciiAnimator.TryStopIfRoot();
                    return;
                }

                if (num < 0 || num > _items.Count)
                {
                    MenuHelper.PrintError("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞.");
                    continue;
                }

                var item = _items[num - 1];

                try
                {
                    if (item.IsSubMenu)
                    {
                        var sub = item.SubMenuFactory!.Invoke();
                        sub.Display();
                    }
                    else
                    {
                        // –î–ª—è —ç–∫—Ä–∞–Ω–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π —à–∞–ø–∫–∞ —É–∂–µ —Ä–∏—Å—É–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
                        item.Action?.Invoke();
                        MenuHelper.PressAnyKey();
                    }
                }
                catch (Exception ex)
                {
                    MenuHelper.PrintError($"–û—à–∏–±–∫–∞: {ex.Message}");
                    MenuHelper.PressAnyKey();
                }
            }
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    public static class MenuHelper
    {
        public static void PrintHeader(string title)
        {
            Console.Clear();

            // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç)
            AsciiAnimator.EnsureRunning();

            // –†–∞–º–∫–∞ + –∑–∞–≥–æ–ª–æ–≤–æ–∫
            var line = new string('‚ïê', Math.Max(10, Math.Min(Console.WindowWidth - 2, title.Length + 6)));
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine($"‚ïî{line}‚ïó");
            Console.WriteLine($"‚ïë  {title}  ‚ïë");
            Console.WriteLine($"‚ïö{line}‚ïù");
            Console.ResetColor();

            // –û—Ç—Å—Ç—É–ø –ø–æ–¥ —à–∞–ø–∫–æ–π
            Console.WriteLine();
        }

        public static void PrintInfo(string message)
        {
            Console.ForegroundColor = ConsoleColor.DarkCyan;
            Console.WriteLine(message);
            Console.ResetColor();
        }

        public static void PrintSuccess(string message)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(message);
            Console.ResetColor();
        }

        public static void PrintError(string message)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(message);
            Console.ResetColor();
        }

        public static void PressAnyKey()
        {
            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            // –ü–æ–∫–∞ –∂–¥–µ–º ‚Äî –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —à–∞–ø–∫–µ
            Console.ReadKey(true);
        }
    }

    // –§–æ–Ω–æ–≤–∞—è ASCII-–∞–Ω–∏–º–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
    internal static class AsciiAnimator
    {
        // –û–±—â–∏–π —Ñ–ª–∞–∂–æ–∫ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
        public static bool Enabled = true;

        private static readonly object _sync = new();
        private static Thread? _thread;
        private static CancellationTokenSource? _cts;

        // –°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
        private const int BannerHeight = 6;
        private const int FrameDelayMs = 120;

        // –ß—Ç–æ–±—ã –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö
        private static int _startCount = 0;

        // –ù–∞–±–æ—Ä—ã –∫–∞–¥—Ä–æ–≤
        private static readonly string[][] Cat =
        {
            new []
            {
                " /\\_/\\ ",
                "( o.o )",
                " > ^ < ",
                "  = =  ",
                "       ",
                "  –ö–æ—Ç  "
            },
            new []
            {
                " /\\_/\\ ",
                "( ‚Ä¢.‚Ä¢ )",
                " > ^ < ",
                "  = =  ",
                "       ",
                "  –ö–æ—Ç  "
            }
        };

        private static readonly string[][] Dog =
        {
            new []
            {
                " /‚Äæ‚Äæ‚Äæ\\ ",
                "(‚Ä¢·¥•‚Ä¢ )",
                " /| |\\ ",
                "  | |  ",
                "       ",
                " –°–æ–±–∞–∫–∞"
            },
            new []
            {
                " /‚Äæ‚Äæ‚Äæ\\ ",
                "(‚Ä¢·¥•‚Ä¢ )",
                " /| |\\ ",
                "  | |  ",
                "  ‚ú¶    ",
                " –°–æ–±–∞–∫–∞"
            }
        };

        private static readonly string[][] Bunny =
        {
            new []
            {
                " (\\_/) ",
                " (‚Ä¢.‚Ä¢) ",
                " />üçÉ  ",
                "       ",
                "       ",
                " –ö—Ä–æ–ª–∏–∫"
            },
            new []
            {
                " (\\_/) ",
                " (‚Ä¢.‚Ä¢) ",
                "  üçÉ<\\ ",
                "       ",
                "       ",
                " –ö—Ä–æ–ª–∏–∫"
            }
        };

        private static readonly string[][][] Animals = { Cat, Dog, Bunny };

        public static void EnsureRunning()
        {
            if (!Enabled) return;

            lock (_sync)
            {
                _startCount++;
                if (_thread is { IsAlive: true }) return;

                _cts = new CancellationTokenSource();
                var token = _cts.Token;
                _thread = new Thread(() => RunLoop(token))
                {
                    IsBackground = true,
                    Name = "ASCII-Animals-Animator"
                };
                _thread.Start();
            }
        }

        // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–µ–Ω—é
        public static void TryStopIfRoot()
        {
            lock (_sync)
            {
                if (_startCount > 0) _startCount--;
                if (_startCount == 0)
                {
                    StopInternal();
                }
            }
        }

        private static void StopInternal()
        {
            try
            {
                _cts?.Cancel();
                _thread?.Join(300);
            }
            catch { /* ignore */ }
            finally
            {
                _cts = null;
                _thread = null;
                ClearBannerArea();
            }
        }

        private static void RunLoop(CancellationToken token)
        {
            var rnd = new Random();
            var animalIndex = rnd.Next(Animals.Length);
            var frame = 0;
            var lastWidth = Console.WindowWidth;

            while (!token.IsCancellationRequested)
            {
                try
                {
                    var frames = Animals[animalIndex];
                    DrawFrame(frames[frame]);

                    frame = (frame + 1) % frames.Length;

                    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ
                    if (rnd.NextDouble() < 0.02)
                        animalIndex = rnd.Next(Animals.Length);

                    // –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏ –ø–æ–º–µ–Ω—è–ª–∞—Å—å ‚Äî –æ—á–∏—Å—Ç–∏–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
                    if (Console.WindowWidth != lastWidth)
                    {
                        lastWidth = Console.WindowWidth;
                        ClearBannerArea();
                    }

                    Thread.Sleep(FrameDelayMs);
                }
                catch
                {
                    // –õ—é–±—ã–µ –æ—à–∏–±–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    Thread.Sleep(200);
                }
            }
        }

        private static void DrawFrame(string[] frame)
        {
            lock (_sync)
            {
                // –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                int curLeft, curTop;
                try
                {
                    curLeft = Console.CursorLeft;
                    curTop = Console.CursorTop;
                }
                catch
                {
                    curLeft = 0;
                    curTop = BannerHeight + 1;
                }

                var width = MaxWidth(frame) + 2;
                var left = Math.Max(0, Console.WindowWidth - width - 2);
                var top = 0;

                // –†–∏—Å—É–µ–º ¬´–±–∞–Ω–Ω–µ—Ä¬ª —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É
                for (int i = 0; i < BannerHeight; i++)
                {
                    var line = i < frame.Length ? frame[i] : "";
                    WriteAt(left, top + i, PadTo(line, width));
                }

                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                TrySetCursor(curLeft, curTop);
            }
        }

        private static void ClearBannerArea()
        {
            lock (_sync)
            {
                var width = Math.Max(10, Console.WindowWidth / 3);
                var left = Math.Max(0, Console.WindowWidth - width - 2);
                for (int i = 0; i < BannerHeight; i++)
                {
                    WriteAt(left, i, new string(' ', width + 2));
                }
            }
        }

        private static void WriteAt(int left, int top, string text)
        {
            TrySetCursor(left, top);
            try
            {
                Console.ForegroundColor = ConsoleColor.DarkYellow;
                Console.Write(text);
            }
            catch { /* ignore */ }
            finally
            {
                Console.ResetColor();
            }
        }

        private static void TrySetCursor(int left, int top)
        {
            try
            {
                left = Math.Max(0, Math.Min(left, Math.Max(0, Console.WindowWidth - 1)));
                top = Math.Max(0, Math.Min(top, Math.Max(0, Console.WindowHeight - 1)));
                Console.SetCursorPosition(left, top);
            }
            catch { /* ignore */ }
        }

        private static int MaxWidth(string[] lines)
        {
            var max = 0;
            foreach (var l in lines)
                if (l.Length > max) max = l.Length;
            return max;
        }

        private static string PadTo(string s, int w)
        {
            if (s.Length >= w) return s;
            return s + new string(' ', w - s.Length);
        }
    }
}
